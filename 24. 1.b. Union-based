
b. Union-based:
- The purpose is to obtain multiple results by combining multiple queries into a single query using the UNION statement.

Union-based:
- To use UNION, the query before the UNION and the query after the UNION must have the same number of columns.
Example:

SELECT a, b FROM table1  -> a, b  (2 columns)
UNION 
SELECT c, d FROM table2 -> c, d  (2 columns)


- We need to know the number of columns to use UNION.
- We can find out using ORDER BY.

Example:

 SELECT name, lname FROM users WHERE id=''

In this statement, if we say:

 ' ORDER BY 1#

-it will treat everything after 1 as a comment, so the second quote won't be read.

- If ORDER BY 1 has no response or error, it means the first column exists.
- Then, we try ORDER BY 2. If there's still no error, we proceed.
- We continue until we encounter an error. For example, if ORDER BY 4 gives an error, it means there is no fourth column, and we understand the table has 3 columns.

After learning the number of columns with ORDER BY:

' UNION SELECT <guess>, <guess> FROM <guess>#

Example:

SELECT first_name, last_name FROM users WHERE user_id = '' UNION SELECT username, password FROM users#


- ORDER BY 1,2,3: sorts sequentially. If there is no third column, it will give an error.
- Additionally, we can use UNION SELECT 1,2# to learn the number of columns and the numbers of the columns displayed by the site.

Assume there are 7 columns, but the displayed columns are:

username=2
password=4
signature=6

- If we want to use a function and see the result, we need to use columns 2, 4, and 6.

Assuming there are 7 columns:

' UNION SELECT 2, database(), 3, 4, 5, 6, 7


If:

' UNION SELECT database(), 2, 3, 4, 5, 6, 7

it won't return results.

- `database()`: gives the name of the database.
- `user()`: gives the name of the user managing the database or the connected user.
- `version()`: obtains the version information of SQL.

